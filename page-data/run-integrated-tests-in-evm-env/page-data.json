{"componentChunkName":"component---node-modules-etclabscore-gatsby-theme-pristine-src-templates-default-tsx","path":"/run-integrated-tests-in-evm-env","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Running integrated tests in EVM environment\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Running integrated tests in EVM environment\"), mdx(\"p\", null, \"EVM is different than other execution platform in that it is on blockchain. The result of the execution of a smart contract will be dependent on the state of the blockchain as well. So, we have to integrate EVM execution environment (in this early stage, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"geth\"), \") into our tests.\"), mdx(\"h2\", null, \"Constructor\"), mdx(\"p\", null, \"Unit tests will only focus on small test functions. But you cannot execute a function independently on blockchain, we need to have a contract constructor and dispatcher as the first function in the file. The reason is that EVM will always start its execution from address \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0x00\"), \" -- where the contract header / constructor /dispatcher resides. The header then tries to set up the contract -- allocating memory/storage or parsing incoming parameters, et cetera.\"), mdx(\"p\", null, \"Here is the commentated constructor code we use for handling unit tests:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"define void @main() {\\nentry:\\n  %0 = call i256 @llvm.evm.calldataload(i256 0) ; extract first 32-byte argument\\n  %1 = call i256 @llvm.evm.calldataload(i256 32); extract second 32-byte argument\\n  %2 = call i256 @test(i256 %0, i256 %1)        ;  execute the unit test function\\n  call void @llvm.evm.mstore(i256 0, i256 %2)   ; store the returned value to memory address `0x00`\\n  call void @llvm.evm.return(i256 0, i256 32)   ; call \\\"return\\\" to return the value returned by @test\\n  unreachable\\n}\\n\")), mdx(\"p\", null, \"Notice that the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@test\"), \" function takes 2 parameters, so we will have two calls to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@llvm.evm.calldataload\"), \".\"), mdx(\"p\", null, \"The unit test is compiled using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"llc\"), \" with options: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-mtriple=evm -filetype=obj\"), \". Then the code is executed using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"geth\"), \"'s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"evm\"), \" command. \"), mdx(\"h2\", null, \"Testing utilities\"), mdx(\"p\", null, \"A Python script is used to handle the testing, file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"evm_llvm/tools/evm-test/evm_test.py\"), \" is the script we created  to test functionalities of the llvm backend. Here are what it does:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"call evm_llvm backend to compile an LLVM IR file (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".ll\"), \" file) into object file (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".o\"), \") file. The file should contain the function we are going to verify along with a smart contract constructor header which is used to handle input arguments. The function should be at the beginning of the IR file (the first function).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"extract the contract opcodes from the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".o\"), \" file and prepare the input arguments (by padded each arguments to be 32 bytes long and concatenate everything into a long string).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Run the executable binary using geth's \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"evm\"), \", get the result from the print, And compare the result with expected value.\")), mdx(\"h2\", null, \"How to run testings\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Install Python3\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Run \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"evm_llvm/tools/evm-test/evm_test.py\"), \" then you should see the results.\")), mdx(\"h2\", null, \"How to add new tests\"), mdx(\"p\", null, \"Please take a look at the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"evm_llvm/tools/evm-test/evm_testsuit.py\"), \" file, it organizes tests by categorizing them into different \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OrderedList\"), \". Each element of the list contains the following information:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the name of the test\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the array of input arguments\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the path of the unit test source code file (in LLVM IR form)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the expected result value\")), mdx(\"p\", null, \"When adding new tests, you should:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"put your test files into \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"evm_llvm/test/CodeGen/EVM\"), \" folder.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"add the test file path and expected results to the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"evm_testsuit.py\"), \" file. (We might change it when the file gets too large).\")), mdx(\"h2\", null, \"TODO lists\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"add blockchain state related tests\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"add re-entrance tests (which are also related to changes of blockchain states)\")), mdx(\"p\", null, \"Please help improve the test utility!\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Running integrated tests in EVM environment EVM is different than other execution platform in that it is on blockchain. The result of theâ€¦","fields":{"slug":"/run-integrated-tests-in-evm-env"},"frontmatter":{"title":"Running integrated tests in EVM environment"}}},"pageContext":{"slug":"/run-integrated-tests-in-evm-env","prev":{"name":"Language Frontend Integration","link":"/lang-frontend-integration","ignoreNextPrev":null},"next":{"name":"Stack & Memory management","link":"/stack-and-memory-management","ignoreNextPrev":null}}}}