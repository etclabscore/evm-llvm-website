{"componentChunkName":"component---node-modules-etclabscore-gatsby-theme-pristine-src-templates-default-tsx","path":"/emitting-program-metadata","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Emitting Program Metadata\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Emitting Program Metadata\"), mdx(\"p\", null, \"EVM LLVM provides a way to emit program's metadata for various of purposes. For examples, a symbol table that records the jump destinations can be emitted along with the generated binary. \"), mdx(\"p\", null, \"Developers can use this utility to emit more program information. \"), mdx(\"h2\", null, \"Existing implementation\"), mdx(\"p\", null, \"When compiling a contract, a file named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"EVMMeta.txt\"), \" will be generated along with the binary code. To specify a custom metadata file name, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-evm_md_file\"), \" can be used.\"), mdx(\"p\", null, \"Existing implementation of EVM metadata emitting is limited to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MachineCode\"), \" module.\"), mdx(\"h2\", null, \"Future improvement\"), mdx(\"p\", null, \"Consider moving the file handle to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"EVMTargetMachine\"), \" class so every pass can emit values to the file.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Emitting Program Metadata EVM LLVM provides a way to emit program's metadata for various of purposes. For examples, a symbol table thatâ€¦","fields":{"slug":"/emitting-program-metadata"},"frontmatter":{"title":"Emitting Program Metadata"}}},"pageContext":{"slug":"/emitting-program-metadata","prev":{"name":"Compiling Smart Contracts","link":"/compiling-smart-contracts","ignoreNextPrev":null},"next":{"name":"Function Layouts","link":"/function-layouts","ignoreNextPrev":null}}}}