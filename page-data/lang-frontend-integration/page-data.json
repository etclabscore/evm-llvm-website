{"componentChunkName":"component---node-modules-etclabscore-gatsby-theme-pristine-src-templates-default-tsx","path":"/lang-frontend-integration","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Language Frontend Integration\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Language Frontend Integration\"), mdx(\"h2\", null, \"EVM target specific changes\"), mdx(\"h3\", null, \"Frontend is expected to emit 256bit values LLVM IR\"), mdx(\"p\", null, \"The EVM architecture is the only 256-bit machine out there in the market, and so far it have not yet received support from LLVM community. We added 256-bit and 160-bit support in the LLVM IR level. \"), mdx(\"p\", null, \"In order to utilize 256-bit and 160-bit operands, developers are expected to emit \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i256\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i160\"), \" data types in their IR code generation. Include the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"evm_llvm\"), \"'s header files in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"include/llvm\"), \" folders so that these two pre-defined data types can be properly generated.\"), mdx(\"h3\", null, \"Frontend needs to generate compatible LLVM IR\"), mdx(\"p\", null, \"Notice that development of this backend is based on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"LLVM 10.0.dev\"), \", which is the master trunk. We could do back porting to lower versions such as LLVM 9 or LLVM 8 at the request of developers for better stability or compatibility.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Language Frontend Integration EVM target specific changes Frontend is expected to emit 256bit values LLVM IR The EVM architecture is theâ€¦","fields":{"slug":"/lang-frontend-integration"},"frontmatter":{"title":"Language Frontend Integration"}}},"pageContext":{"slug":"/lang-frontend-integration","prev":{"name":"Intrinsic Functions","link":"/intrinsic-functions","ignoreNextPrev":null},"next":{"name":"Running integrated tests in EVM evniorment","link":"/run-integrate-tests-in-evm-env","ignoreNextPrev":null}}}}